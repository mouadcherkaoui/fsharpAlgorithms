#!markdown

first lets start by preparing a 2D array that we will use for our tests.

#!fsharp

open System
open System.Collections


let source = 
    array2D [|
        [| 1; 2; 3; 4; 5 |];
        [| 16; 17; 18; 19; 6 |];
        [| 15; 24; 25; 20; 7 |];
        [| 14; 23; 22; 21; 8 |];
        [| 13; 12; 11; 10; 9 |];                                
    |]

let source2 = 
    array2D [|
        [| 1; 2; 3; 4; 5; 6; 7 |];
        [| 24; 25; 26; 27; 28; 29; 8 |];
        [| 23; 40; 41; 42; 43; 30; 9 |];
        [| 22; 39; 48; 49; 44; 31; 10 |];
        [| 21; 38; 47; 46; 45; 32; 11 |];
        [| 20; 37; 36; 35; 34; 33; 12 |];                                        
        [| 19; 18; 17; 16; 15; 14; 13 |];                                        

    |]

    

#!markdown

now lets prepare some functions to print and increment processed items

#!fsharp

                        
let printResult (arr: int array) = 
    Array.ForEach(arr, (fun v ->  printfn "%d" v))

let reverse arr =
    Array.rev arr

#!markdown

now we need two method to move through the array and collect items for a specific dimension, omiting the last item

#!fsharp

let moveX start _end y (arr: int[,]) =
    if start > _end then
        [|for i = start downto _end do
            arr.[i, y]|]
    else
        [|for i = start to _end do
            arr.[i, y]|]

#!markdown

Both these two blocks are identical, in that they simply loop through the array in a specific dimension the X, by keeping the Y axis static

```txt
    ________________
  Y |--|--|--|--|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
````

#!fsharp

let mvX start _end y (arr: int[,]) =
    if start > _end then 
        reverse arr.[_end .. start, y]
    elif start < _end then  
        arr.[start .. _end, y]
    else  
        [|arr.[start, y]|]

#!fsharp

let moveY start _end x (arr: int[,]) =
    if start > _end then
        [|for i = start downto _end do
            arr.[x, i]|]
    else
        [|for i = start to _end do
            arr.[x, i]|]

#!markdown

Both these two blocks are identical, in that they simply loop through the array in a specific dimension the Y axis, by keeping the X axis static
```txt
                  X
    ________________
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|__|
```

#!fsharp

let mvY start _end x (arr: int[,]) =
    if start > _end then 
        reverse arr.[x, _end .. start]
    elif start < _end then
        arr.[x, start .. _end]
    else 
        [|arr.[x, start]|]

#!fsharp

type Axis =
    | X of position: int
    | Y of position: int

type Move =
    | Horizontal of start:int * _end:int * Axis
    | Vertical of start:int * _end:int * Axis


let moveHorizontal start _end y = 
    Horizontal(start, _end, Y(y))

let moveVertical start _end y =
    Vertical(start, _end, Y(y))

// let move input =
//     match input with 
//     | Horizontal (x1, x2, Y(y)) -> moveX x1 x2 y
//     | Vertical (x1, x2, Y(y)) -> moveY x1 x2 y
//     | _ -> None

// let rec extract (arr: 'T[,]) (level: int) = 
//     move Horizontal((arr.Length - level), (level - 1), Y(arr.Length - level)) |> ignore
//     move Vertical((arr.Length - level), (level - 1), X(level)) |> ignore
//     move Horizontal((level), (arr.Length - level + 1), Y(level)) |> ignore
//     move Vertical((level), (arr.Length - level + 1), (arr.Length - level)) |> ignore
//     extract arr (level - 1)

// extract source2

#!fsharp

let extract (arr: int[,]) = 
    
    let mutable result: int[] = [||]
    let mutable lvl = 0
    let mutable length = (arr.GetUpperBound 1) 

    let appendRange (range: int[]) =
        result <- Array.append result range                


    for i = 0 to (length - 1) do 
        lvl <- length - i
        mvY i (lvl - 1) i arr // 1
            |> appendRange                    
        mvX i (lvl - 1) lvl arr // 2
            |> appendRange 
        mvY (lvl) (i + 1) lvl arr // 3
            |> appendRange
        mvX (lvl) (i + 1) i arr // 4
            |> appendRange
    result.[0..arr.Length - 1]

extract source2
|> fun result -> 
    printfn "%A" result
    result

#!markdown

```txt
1 -
    ________________
  Y |--|--|--|--|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|

2 - 
                 X
    ________________
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|--|
    |__|__|__|__|__|

3 -
    ________________
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
    |__|__|__|__|__|
  Y |__|--|--|--|--|

4 - 
     X            
    ________________
    |__|__|__|__|__|
    |--|__|__|__|__|
    |--|__|__|__|__|
    |--|__|__|__|__|
    |--|__|__|__|__|
```

#!csharp

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

enum Axis {
    XAxis,
    YAxis
}

#!csharp

IEnumerable<int> collectItems(int[,] source, int start, int end, int position, Axis axis) {
    var result = new int[Math.Abs(end - start)];
    Func<int, int> stepFunc = 
        start > end 
        ? (i) => --i
        : (i) => ++i;     
        
    Func<int, int, bool> stopPredicate = 
        start > end 
        ? (i, e) => i >= end
        : (i, e) => i <= end;
            
    var i = start;
    while (stopPredicate(i, end)) {
        var j = i;
        i = stepFunc(i);
        switch (axis) {
            case Axis.XAxis:
                yield return source[j, position];
                break;
            case Axis.YAxis:
                yield return source[position, j];
                break;   
        }     
    }    
}

#!csharp

int[] ExtractSpiral(int[,] source) {
    var resultToReturn = new List<int>();
    for (int i = 0; i < source.GetLength(0) - 1 ; i++) {
        var level = source.GetLength(0) - 1 - i;
         resultToReturn.AddRange(
             collectItems(source, i, level - 1, i, Axis.YAxis));
        resultToReturn.AddRange(
            collectItems(source, i, level - 1, level, Axis.XAxis)
        );
        resultToReturn.AddRange(
            collectItems(source, level, i + 1, level, Axis.YAxis)
        );
        resultToReturn.AddRange(
            collectItems(source, level, i + 1, i, Axis.XAxis)
        );        
    }
    resultToReturn.RemoveRange(source.Length, resultToReturn.Count - source.Length);
    return resultToReturn.ToArray();
}

var test = new int[,] {
    { 1, 2, 3, 4 },
    { 5, 6, 7, 8 },
    { 9, 10, 11, 12 },
    { 13, 14, 15, 16 }
};

var test2 = new int[,]  
    {
        { 1, 2, 3, 4, 5, 6, 7 },
        { 24, 25, 26, 27, 28, 29, 8 },
        { 23, 40, 41, 42, 43, 30, 9 },
        { 22, 39, 48, 49, 44, 31, 10 },
        { 21, 38, 47, 46, 45, 32, 11 },
        { 20, 37, 36, 35, 34, 33, 12 },                                        
        { 19, 18, 17, 16, 15, 14, 13 }                                        
    };
var result = ExtractSpiral(test2);

foreach(var i in result) {
    Console.Write("{0}; ",i);
}

result

#!html

<table>
   <tbody>
      <tr>
         <td>*></td>
         <td>*></td>
         <td>*></td>
         <td><></td>         
      </tr>
      <tr>
         <td><|></td>
         <td></td>
         <td></td>
         <td><></td>         
      </tr>
      <tr>
         <td><|></td>
         <td></td>
         <td></td>
         <td><></td>         
      </tr>
      <tr>
         <td><|></td>
         <td><*</td>
         <td><*</td>
         <td><*</td>         
      </tr>                 
   </tbody>
</table>
