#!markdown

first lets start by preparing a 2D array that we will use for our tests.

#!fsharp

open System
open System.Collections


let source = 
    array2D [|
        [| 1; 2; 3; 4; 5 |];
        [| 16; 17; 18; 19; 6 |];
        [| 15; 24; 25; 20; 7 |];
        [| 14; 23; 22; 21; 8 |];
        [| 13; 12; 11; 10; 9 |];                                
    |]

let source2 = 
    array2D [|
        [| 1; 2; 3; 4; 5; 6; 7 |];
        [| 24; 25; 26; 27; 28; 29; 8 |];
        [| 23; 40; 41; 42; 43; 30; 9 |];
        [| 22; 39; 48; 49; 44; 31; 10 |];
        [| 21; 38; 47; 46; 45; 32; 11 |];
        [| 20; 37; 36; 35; 34; 33; 12 |];                                        
        [| 19; 18; 17; 16; 15; 14; 13 |];                                        

    |]

    

#!markdown

now lets prepare some functions to print and increment processed items

#!fsharp

let mutable counter = 0
                        
let printResult (arr: int array) = 
    Array.ForEach(arr, (fun v ->  printfn "%d" v))

let incrementCounter amount = 
    counter <- counter + amount

#!markdown

now we need two method to move through the array and collect items for a specific dimension, omiting the last item

#!fsharp

let moveX start _end y (arr: int[,]) =
    if start > _end then
        [|for i = start downto _end do
            arr.[i, y]|]
    else
        [|for i = start to _end do
            arr.[i, y]|]

#!markdown

Both these two blocks are identical, in that they simply loop through the array in a specific dimension the X, by keeping the Y axis static

#!fsharp

let reverse arr =
    Array.rev arr
let mvX start _end y (arr: int[,]) =
    if start > _end then 
        reverse arr.[_end .. start, y]
    elif start < _end then  
        arr.[start .. _end, y]
    else  
        [|arr.[start, y]|]

#!fsharp

let moveY start _end x (arr: int[,]) =
    if start > _end then
        [|for i = start downto _end do
            arr.[x, i]|]
    else
        [|for i = start to _end do
            arr.[x, i]|]

#!markdown

Both these two blocks are identical, in that they simply loop through the array in a specific dimension the Y axis, by keeping the X axis static

#!fsharp

let mvY start _end x (arr: int[,]) =
    if start > _end then 
        reverse arr.[x, _end .. start]
    elif start < _end then
        arr.[x, start .. _end]
    else 
        [|arr.[x, start]|]

#!fsharp

let extract (arr: int[,]) = 
    
    let mutable result: int[] = [||]
    let mutable length = (arr.GetUpperBound 1) 
    let mutable lvl = 0

    let appendRange (range: int[]) =
        result <- Array.append result range                


    for i = 0 to (length - 1) do 
            lvl <- length - i
            mvY i (lvl - 1) i arr
                |> appendRange                    
            mvX i (lvl - 1) lvl arr
                |> appendRange 
            mvY (lvl) (i + 1) lvl arr
                |> appendRange
            mvX (lvl) (i + 1) i arr
                |> appendRange
    result.[0..arr.Length - 1]

extract source2
|> fun result -> 
    printfn "%A" result
    result
